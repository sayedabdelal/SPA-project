{"ast":null,"code":"var _jsxFileName = \"/home/sayed/Documents/ReactJs/redux/Redux-SPA/12-adv-starting-project/frontend/src/pages/NewEventPage.js\";\nimport EventForm from \"../components/EventForm\";\nimport { json } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NewEventPage() {\n  return /*#__PURE__*/_jsxDEV(EventForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 9\n  }, this);\n}\n_c = NewEventPage;\nexport default NewEventPage;\nexport async function action({\n  request,\n  params\n}) {\n  const data = await request.formData();\n  const eventData = {\n    title: data.get('title'),\n    image: data.get('image'),\n    date: data.get('date'),\n    description: data.get('description')\n  };\n  const response = await fetch(\"http://localhost:8080/events\", {\n    method: 'POST',\n    header: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(eventData)\n  });\n  if (!response.ok) {\n    throw json({\n      me\n    });\n  }\n}\n\n/**\n *  The action function :: handle form submissions  actions that require data manipulation (e.g., creating, updating, or deleting resources).\n * \n * requset :: It contains information about the request, such as headers, method, and body\n * Request class from the Fetch API.\n * \n * arams object contains any route parameters defined in the route's path\n * userId with the value from the URL.\n */\nvar _c;\n$RefreshReg$(_c, \"NewEventPage\");","map":{"version":3,"names":["EventForm","json","jsxDEV","_jsxDEV","NewEventPage","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","request","params","data","formData","eventData","title","get","image","date","description","response","fetch","method","header","body","JSON","stringify","ok","me","$RefreshReg$"],"sources":["/home/sayed/Documents/ReactJs/redux/Redux-SPA/12-adv-starting-project/frontend/src/pages/NewEventPage.js"],"sourcesContent":["import EventForm from \"../components/EventForm\";\nimport { json } from \"react-router-dom\";\nfunction NewEventPage() {\n    return (\n        <EventForm />\n    )\n}\n\nexport default NewEventPage;\n\n\nexport async function action({request, params}) {\n    const data = await request.formData();\n\n    const eventData = {\n        title: data.get('title'),\n        image : data.get('image'),\n        date : data.get('date'),\n        description : data.get('description'),\n    }\n\n    const response = await fetch(\"http://localhost:8080/events\", {\n        method: 'POST',\n        header: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(eventData),\n    });\n\n    if(!response.ok) {\n        throw json({me})\n    }\n\n\n}\n\n/**\n *  The action function :: handle form submissions  actions that require data manipulation (e.g., creating, updating, or deleting resources).\n * \n * requset :: It contains information about the request, such as headers, method, and body\n * Request class from the Fetch API.\n * \n * arams object contains any route parameters defined in the route's path\n * userId with the value from the URL.\n */"],"mappings":";AAAA,OAAOA,SAAS,MAAM,yBAAyB;AAC/C,SAASC,IAAI,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACxC,SAASC,YAAYA,CAAA,EAAG;EACpB,oBACID,OAAA,CAACH,SAAS;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAErB;AAACC,EAAA,GAJQL,YAAY;AAMrB,eAAeA,YAAY;AAG3B,OAAO,eAAeM,MAAMA,CAAC;EAACC,OAAO;EAAEC;AAAM,CAAC,EAAE;EAC5C,MAAMC,IAAI,GAAG,MAAMF,OAAO,CAACG,QAAQ,CAAC,CAAC;EAErC,MAAMC,SAAS,GAAG;IACdC,KAAK,EAAEH,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACxBC,KAAK,EAAGL,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACzBE,IAAI,EAAGN,IAAI,CAACI,GAAG,CAAC,MAAM,CAAC;IACvBG,WAAW,EAAGP,IAAI,CAACI,GAAG,CAAC,aAAa;EACxC,CAAC;EAED,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;IACzDC,MAAM,EAAE,MAAM;IACdC,MAAM,EAAE;MACJ,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACZ,SAAS;EAClC,CAAC,CAAC;EAEF,IAAG,CAACM,QAAQ,CAACO,EAAE,EAAE;IACb,MAAM3B,IAAI,CAAC;MAAC4B;IAAE,CAAC,CAAC;EACpB;AAGJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA,IAAApB,EAAA;AAAAqB,YAAA,CAAArB,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}