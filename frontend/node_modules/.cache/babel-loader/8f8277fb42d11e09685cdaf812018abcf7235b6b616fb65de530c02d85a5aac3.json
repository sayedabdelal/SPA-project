{"ast":null,"code":"// Challenge / Exercise\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\nimport{RouterProvider,createBrowserRouter}from'react-router-dom';import EditEventPage from'./pages/EditEventPage';import ErrorPage from'./pages/Error';import EventDetailPage,{loader as eventDetailLoader,action as deleteEventAction}from'./pages/EventDetailPage';import EventsPage,{loader as eventsLoader}from'./pages/EventsPage';import EventsRootLayout from'./pages/EventsRoot';import HomePage from'./pages/HomePage';import NewEventPage from'./pages/NewEventPage';import RootLayout from'./pages/root';import{action as manipulateEventAction}from'./components/EventForm';import NewsletterPage,{action as newsletterAction}from'./pages/Newsletter';import{jsx as _jsx}from\"react/jsx-runtime\";const router=createBrowserRouter([{path:'/',element:/*#__PURE__*/_jsx(RootLayout,{}),errorElement:/*#__PURE__*/_jsx(ErrorPage,{}),children:[{index:true,element:/*#__PURE__*/_jsx(HomePage,{})},{path:'events',element:/*#__PURE__*/_jsx(EventsRootLayout,{}),children:[{index:true,element:/*#__PURE__*/_jsx(EventsPage,{}),loader:eventsLoader},{path:':eventId',id:'event-detail',loader:eventDetailLoader,children:[{index:true,element:/*#__PURE__*/_jsx(EventDetailPage,{}),action:deleteEventAction},{path:'edit',element:/*#__PURE__*/_jsx(EditEventPage,{}),action:manipulateEventAction}]},{path:'new',element:/*#__PURE__*/_jsx(NewEventPage,{}),action:manipulateEventAction}]},{path:'newsletter',element:/*#__PURE__*/_jsx(NewsletterPage,{}),action:newsletterAction}]}]);function App(){return/*#__PURE__*/_jsx(RouterProvider,{router:router});}export default App;","map":{"version":3,"names":["RouterProvider","createBrowserRouter","EditEventPage","ErrorPage","EventDetailPage","loader","eventDetailLoader","action","deleteEventAction","EventsPage","eventsLoader","EventsRootLayout","HomePage","NewEventPage","RootLayout","manipulateEventAction","NewsletterPage","newsletterAction","jsx","_jsx","router","path","element","errorElement","children","index","id","App"],"sources":["/home/sayed/Documents/ReactJs/redux/Redux-SPA/12-adv-starting-project/frontend/src/App.js"],"sourcesContent":["// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\n\nimport { RouterProvider, createBrowserRouter } from 'react-router-dom';\n\nimport EditEventPage from './pages/EditEventPage';\nimport ErrorPage from './pages/Error';\nimport EventDetailPage, {\n  loader as eventDetailLoader,\n  action as deleteEventAction,\n} from './pages/EventDetailPage';\nimport EventsPage, { loader as eventsLoader } from './pages/EventsPage';\nimport EventsRootLayout from './pages/EventsRoot';\nimport HomePage from './pages/HomePage';\nimport NewEventPage from './pages/NewEventPage';\nimport RootLayout from './pages/root';\nimport { action as manipulateEventAction } from './components/EventForm';\nimport NewsletterPage, { action as newsletterAction } from './pages/Newsletter';\n\nconst router = createBrowserRouter([\n  {\n    path: '/',\n    element: <RootLayout />,\n    errorElement: <ErrorPage />,\n    children: [\n      { index: true, element: <HomePage /> },\n      {\n        path: 'events',\n        element: <EventsRootLayout />,\n        children: [\n          {\n            index: true,\n            element: <EventsPage />,\n            loader: eventsLoader,\n          },\n          {\n            path: ':eventId',\n            id: 'event-detail',\n            loader: eventDetailLoader,\n            children: [\n              {\n                index: true,\n                element: <EventDetailPage />,\n                action: deleteEventAction,\n              },\n              {\n                path: 'edit',\n                element: <EditEventPage />,\n                action: manipulateEventAction,\n              },\n            ],\n          },\n          {\n            path: 'new',\n            element: <NewEventPage />,\n            action: manipulateEventAction,\n          },\n        ],\n      },\n      {\n        path: 'newsletter',\n        element: <NewsletterPage />,\n        action: newsletterAction,\n      },\n    ],\n  },\n]);\n\nfunction App() {\n  return <RouterProvider router={router} />;\n}\n\nexport default App;"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAASA,cAAc,CAAEC,mBAAmB,KAAQ,kBAAkB,CAEtE,MAAO,CAAAC,aAAa,KAAM,uBAAuB,CACjD,MAAO,CAAAC,SAAS,KAAM,eAAe,CACrC,MAAO,CAAAC,eAAe,EACpBC,MAAM,GAAI,CAAAC,iBAAiB,CAC3BC,MAAM,GAAI,CAAAC,iBAAiB,KACtB,yBAAyB,CAChC,MAAO,CAAAC,UAAU,EAAIJ,MAAM,GAAI,CAAAK,YAAY,KAAQ,oBAAoB,CACvE,MAAO,CAAAC,gBAAgB,KAAM,oBAAoB,CACjD,MAAO,CAAAC,QAAQ,KAAM,kBAAkB,CACvC,MAAO,CAAAC,YAAY,KAAM,sBAAsB,CAC/C,MAAO,CAAAC,UAAU,KAAM,cAAc,CACrC,OAASP,MAAM,GAAI,CAAAQ,qBAAqB,KAAQ,wBAAwB,CACxE,MAAO,CAAAC,cAAc,EAAIT,MAAM,GAAI,CAAAU,gBAAgB,KAAQ,oBAAoB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEhF,KAAM,CAAAC,MAAM,CAAGnB,mBAAmB,CAAC,CACjC,CACEoB,IAAI,CAAE,GAAG,CACTC,OAAO,cAAEH,IAAA,CAACL,UAAU,GAAE,CAAC,CACvBS,YAAY,cAAEJ,IAAA,CAAChB,SAAS,GAAE,CAAC,CAC3BqB,QAAQ,CAAE,CACR,CAAEC,KAAK,CAAE,IAAI,CAAEH,OAAO,cAAEH,IAAA,CAACP,QAAQ,GAAE,CAAE,CAAC,CACtC,CACES,IAAI,CAAE,QAAQ,CACdC,OAAO,cAAEH,IAAA,CAACR,gBAAgB,GAAE,CAAC,CAC7Ba,QAAQ,CAAE,CACR,CACEC,KAAK,CAAE,IAAI,CACXH,OAAO,cAAEH,IAAA,CAACV,UAAU,GAAE,CAAC,CACvBJ,MAAM,CAAEK,YACV,CAAC,CACD,CACEW,IAAI,CAAE,UAAU,CAChBK,EAAE,CAAE,cAAc,CAClBrB,MAAM,CAAEC,iBAAiB,CACzBkB,QAAQ,CAAE,CACR,CACEC,KAAK,CAAE,IAAI,CACXH,OAAO,cAAEH,IAAA,CAACf,eAAe,GAAE,CAAC,CAC5BG,MAAM,CAAEC,iBACV,CAAC,CACD,CACEa,IAAI,CAAE,MAAM,CACZC,OAAO,cAAEH,IAAA,CAACjB,aAAa,GAAE,CAAC,CAC1BK,MAAM,CAAEQ,qBACV,CAAC,CAEL,CAAC,CACD,CACEM,IAAI,CAAE,KAAK,CACXC,OAAO,cAAEH,IAAA,CAACN,YAAY,GAAE,CAAC,CACzBN,MAAM,CAAEQ,qBACV,CAAC,CAEL,CAAC,CACD,CACEM,IAAI,CAAE,YAAY,CAClBC,OAAO,cAAEH,IAAA,CAACH,cAAc,GAAE,CAAC,CAC3BT,MAAM,CAAEU,gBACV,CAAC,CAEL,CAAC,CACF,CAAC,CAEF,QAAS,CAAAU,GAAGA,CAAA,CAAG,CACb,mBAAOR,IAAA,CAACnB,cAAc,EAACoB,MAAM,CAAEA,MAAO,CAAE,CAAC,CAC3C,CAEA,cAAe,CAAAO,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}